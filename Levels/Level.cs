using System.Diagnostics.CodeAnalysis;
using System.Numerics;
using System.Text.Json.Serialization;
using ThemModdingHerds.Levels.Utils;

namespace ThemModdingHerds.Levels;
public class Level : IParsable<Level>
{
    public const string HEADER = "# This file was generated by ThemModdingHerds.Levels library\n# https://github.com/ThemModdingHerds/levels\n";
    [JsonPropertyName("stageWidth")]
    public int StageWidth {get; set;}
    [JsonPropertyName("stageHeight")]
    public int StageHeight {get; set;}
    [JsonIgnore]
    public Vector2 StageSize {get => new(StageWidth,StageHeight); set{StageWidth = (int)value[0];StageHeight = (int)value[1];}}
    [JsonPropertyName("bottomClearance")]
    public int BottomClearance {get; set;}
    [JsonPropertyName("start1")]
    public int Start1 {get; set;}
    [JsonPropertyName("start2")]
    public int Start2 {get; set;}
    [JsonPropertyName("shadowDir")]
    public char ShadowDir {get; set;} = 'D';
    [JsonPropertyName("shadowDistance")]
    public int ShadowDistance {get; set;}
    [JsonPropertyName("sun")]
    public Sun? Sun {get; set;}
    [JsonPropertyName("proj")]
    public Projection? Projection {get;set;}
    [JsonPropertyName("lights")]
    public List<ILight> Lights {get; set;} = [];
    [JsonPropertyName("reverb")]
    public Reverb Reverb {get; set;} = new();
    [JsonPropertyName("2d")]
    public Background2D Background2D {get; set;} = new();
    [JsonPropertyName("3d")]
    public Background3D? Background3D {get; set;}
    [JsonPropertyName("camera")]
    public Camera Camera {get; set;} = new();
    [JsonPropertyName("musicIntro")]
    public string MusicIntro {get; set;} = "skull_maple_1";
    [JsonPropertyName("musicLoop")]
    public string MusicLoop {get; set;} = "skull_maple_2";
    [JsonPropertyName("musicInterruptIntro")]
    public int MusicInterruptIntro {get; set;} = 0;
    [JsonPropertyName("musicOutro")]
    public string MusicOutro {get; set;} = "skull_maple_2";
    public override string ToString()
    {
        return string.Join('\n',[
            HEADER,
            $"StageSize: {StageWidth} {StageHeight}",
            $"BottomClearance: {BottomClearance}",
            $"Start1: {Start1}",
            $"Start2: {Start2}",
            $"ShadowDir: {ShadowDir}",
            ..from light in Lights select light.ToString(),
            Sun,
            Projection,
            $"SHADOWDIST {ShadowDistance}",
            Reverb,
            Background2D,
            Background3D,
            Camera,
            $"Music_Intro {MusicIntro}",
            $"Music_Loop {MusicLoop}",
            $"Music_InterruptIntro {MusicInterruptIntro}",
            $"Music_Outro {MusicOutro}"
        ]);
    }
    public void Save(string file,bool overwrite = true)
    {
        if(!file.EndsWith(".lvl"))
            throw new Exception("file does not end with .lvl");
        if(File.Exists(file))
        {
            if(!overwrite)
                throw new Exception($"{file} already exists");
            File.Delete(file);
        }
        File.WriteAllText(file,ToString());
    }
    public static Level Read(string path) => Parse(File.ReadAllText(path));
    public static Level Parse(string s,IFormatProvider? provider)
    {
        Level level = new();
        IEnumerable<string> lines = Strings.RemoveComments(s).Split('\n');
        foreach(string line in lines)
        {
            if(line.StartsWith("StageSize:"))
                level.StageSize = LevelParsers.ParseStageSize(line);
            if(line.StartsWith("BottomClearance:"))
                level.BottomClearance = int.Parse(Strings.ParseRest(line,"BottomClearance:"));
            if(line.StartsWith("Start1:"))
                level.Start1 = int.Parse(Strings.ParseRest(line,"Start1:"));
            if(line.StartsWith("Start2:"))
                level.Start2 = int.Parse(Strings.ParseRest(line,"Start2:"));
            if(line.StartsWith("ShadowDir:"))
                level.ShadowDir = char.Parse(Strings.ParseRest(line,"ShadowDir:"));
            if(line.StartsWith("Light: Amb"))
                level.Lights.Add(AmbLight.Parse(line));
            if(line.StartsWith("Light: Pt"))
                level.Lights.Add(PtLight.Parse(line));
            if(line.StartsWith("SUN"))
                level.Sun = Sun.Parse(line);
            if(line.StartsWith("PROJ"))
                level.Projection = Projection.Parse(line);
            if(line.StartsWith("SHADOWDIST"))
                level.ShadowDistance = int.Parse(Strings.ParseRest(line,"SHADOWDIST"));
            if(line.StartsWith("Reverb:"))
                level.Reverb = Reverb.Parse(line);
            if(line.StartsWith("2D"))
                level.Background2D.Path = Strings.ParseRest(line,"2D");
            if(line.StartsWith("3D"))
                level.Background3D = Background3D.Parse(line);
            if(line.StartsWith("CAMERA"))
                level.Camera = Camera.Parse(line);
            if(line.StartsWith("Music_Intro"))
                level.MusicIntro = Strings.ParseRest(line,"Music_Intro");
            if(line.StartsWith("Music_Loop"))
                level.MusicLoop = Strings.ParseRest(line,"Music_Loop");
            if(line.StartsWith("Music_InterruptIntro"))
                level.MusicInterruptIntro = int.Parse(Strings.ParseRest(line,"Music_InterruptIntro"));
            if(line.StartsWith("Music_Outro"))
                level.MusicOutro = Strings.ParseRest(line,"Music_Outro");
        }
        return level;
    }
    public static Level Parse(string s) => Parse(s,null);
    public static bool TryParse([NotNullWhen(true)] string? s,IFormatProvider? provider,[MaybeNullWhen(false)] out Level result)
    {
        try
        {
            Level level = Parse(s ?? throw new Exception(),provider);
            result = level;
            return true;
        }
        catch(Exception)
        {
            result = null;
            return false;
        }
    }
    public static bool TryParse([NotNullWhen(true)] string? s,[MaybeNullWhen(false)] out Level result) => TryParse(s,null,out result);
}
