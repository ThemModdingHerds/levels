using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Numerics;
using ThemModdingHerds.Levels.Utils;
using ThemModdingHerds.Levels.Models.Wavefront;

namespace ThemModdingHerds.Levels.Models;
public class WavefrontModel(IEnumerable<IVertex> vertices,IEnumerable<IFace> indices) : IParsable<WavefrontModel>, IModel
{
    public List<IVertex> Vertices {get;set;} = [..vertices];
    public List<IFace> Faces {get;set;} = [..indices];
    public WavefrontModel(IModel model): this(model.Vertices,model.Faces)
    {

    }
    public WavefrontModel(): this([],[])
    {

    }
    public static WavefrontModel Parse(string s,IFormatProvider? provider)
    {
        string[] lines = Strings.RemoveComments(s).Split('\n');
        List<IVertex> vertices = [];
        List<IFace> indices = [];
        List<string> vs = [];
        List<string> vts = [];
        List<string> vns = [];
        foreach(string line in lines)
        {
            if(line.StartsWith("f "))
                indices.Add(Face.Parse(line));
            if(line.StartsWith("v "))
                vs.Add(line);
            if(line.StartsWith("vt "))
                vts.Add(line);
            if(line.StartsWith("vn "))
                vns.Add(line);
        }
        for(int i = 0;i < vs.Count;i++)
        {
            Vertex vertex = new()
            {
                PositionString = vs[i],
            };
            if(i < vts.Count)
                vertex.UVString = vts[i];
            if(i < vns.Count)
                vertex.NormalString = vns[i];
            vertices.Add(vertex);
        }
        return new(vertices,indices);
    }
    public static WavefrontModel Parse(string s) => Parse(s,null);
    public static bool TryParse([NotNullWhen(true)] string? s, IFormatProvider? provider, [MaybeNullWhen(false)] out WavefrontModel result)
    {
        result = null;
        try
        {
            if(s == null) throw new Exception();
            result = Parse(s,provider);
            return true;
        }
        catch(Exception)
        {
            return false;
        }
    }
    public static bool TryParse([NotNullWhen(true)] string? s,[MaybeNullWhen(false)] out WavefrontModel result) => TryParse(s,null,out result);
    public override string ToString()
    {
        List<string> result = ["# generated by ThemModdingHerds.Levels.Models.Wavefront.Model"];
        result.Add("# vertices");
        foreach(Vertex vertex in Vertices.Cast<Vertex>())
            result.Add(vertex.PositionString);
        result.Add("# uvs");
        foreach(Vertex vertex in Vertices.Cast<Vertex>())
            if(vertex.UV != null)
                result.Add(vertex.UVString);
        result.Add("# normals");
        foreach(Vertex vertex in Vertices.Cast<Vertex>())
            if(vertex.Normal != null)
                result.Add(vertex.NormalString);
        result.Add("# faces");
        foreach(Face face in Faces.Cast<Face>())
        {
            result.Add(face.ToString());
        }
        return string.Join('\n',result);
    }
    public void Save(string filepath)
    {
        File.WriteAllText(filepath,ToString());
    }
}